{
  "name": "code-orange/statuspage",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "Statuspage",
  "branch": "master",
  "style": {
    "name": "Default",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/BannerHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "-apple-system, BlinkMacSystemFont, sans-serif",
    "fontWeight": 400,
    "bold": 600,
    "lineHeight": 1.5,
    "typeScale": [
      72,
      48,
      24,
      20,
      16,
      14,
      12
    ],
    "monospace": "Menlo, monospace",
    "heading": {
      "fontFamily": null,
      "fontStyle": null,
      "fontWeight": 600,
      "lineHeight": 1.25,
      "textTransform": null,
      "letterSpacing": null
    },
    "h0": {},
    "h1": {},
    "h2": {},
    "h3": {},
    "h4": {},
    "h5": {},
    "h6": {},
    "alternativeText": {},
    "space": [
      0,
      8,
      16,
      32,
      48,
      64,
      96
    ],
    "layout": {
      "maxWidth": 1024,
      "centered": false
    },
    "colors": {
      "text": "#111",
      "background": "#fff",
      "primary": "#08e",
      "secondary": "#059",
      "highlight": "#e08",
      "border": "#ddd",
      "muted": "#eee"
    },
    "border": {
      "width": 1,
      "radius": 2
    },
    "link": {},
    "button": {
      "hover": {
        "boxShadow": "inset 0 0 0 999px rgba(0, 0, 0, .125)"
      }
    },
    "input": {},
    "body": {
      "margin": 0
    },
    "breakpoints": {
      "xs": "@media screen and (max-width:40em)",
      "sm": "@media screen and (min-width:40em)",
      "md": "@media screen and (min-width:52em)",
      "lg": "@media screen and (min-width:64em)"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/code-orange/statuspage",
          "text": "GitHub"
        }
      ]
    },
    {
      "component": "header",
      "heading": "statuspage",
      "subhead": "Statuspage is a Lumen package that allows you to easily add a status page to an existing Lumen application or to create a dedicated Lumen status application.",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "statuspage: Statuspage is a Lumen package that allows you to easily add a status page to an existing Lumen application or to create a dedicated Lumen status application.",
          "url": null
        },
        {
          "component": "ui/GithubButton",
          "user": "code-orange",
          "repo": "statuspage"
        }
      ]
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<h1>Statuspage <a href=\"https://packagist.org/packages/code-orange/statuspage\"><img src=\"https://poser.pugx.org/code-orange/statuspage/v/stable\"></a> <a href=\"https://packagist.org/packages/code-orange/statuspage\"><img src=\"https://poser.pugx.org/code-orange/statuspage/downloads\"></a> <a href=\"https://packagist.org/packages/code-orange/statuspage\"><img src=\"https://poser.pugx.org/code-orange/statuspage/license\"></a> <a href=\"https://packagist.org/packages/code-orange/statuspage\"><img src=\"https://poser.pugx.org/code-orange/statuspage/composerlock\"></a></h1>\n\n<p><a href=\"https://status.odysseyattribution.com\"><img src=\"demo.png\"></a>\n<em>Live demo of Statuspage. This installation is a dedicated Lumen app monitoring a bigger Laravel app.</em></p>\n<h2>Installation</h2>\n<pre><span class=\"hljs-symbol\">composer</span> <span class=\"hljs-meta\">require</span> <span class=\"hljs-meta\">code</span>-orange/statuspage</pre><h2>Configuration</h2>\n<p>First, register the Statuspage <code>ServiceProvider</code> in your <code>bootstrap/app.php</code>:</p>\n<pre>$app-&gt;register(CodeOrange\\Statuspage\\StatuspageProvider::<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>);</span></pre><p>By default, Statuspage will register the status page at <code>/</code> and a JSON version of it on <code>/json</code>.\nIf you want to override this behaviour, you can set the <code>STATUSPAGE_ROUTE</code> environment variable.\nIf your route doesn&apos;t end in a slash, the JSON version will be hosted at <code>/{$route}.json</code>.</p>\n<p>Statuspage comes with a default HTML page that displays the status of all registered checks.\nIf you&apos;d like to make changes to this page, you should copy the view (from <code>vendor/code-orange/statuspage/src/views/</code>) to your own views folder.\nYou can then set the view you would like Statuspage to render with <code>STATUSPAGE_VIEW</code>.</p>\n<p>For the header on the status page, Statuspage will normally use your <code>APP_NAME</code> or <code>config(&apos;app.name&apos;)</code> followed by the word &apos;status&apos;.\nIf you want to use something different, you can set the <code>STATUSPAGE_HEADER</code> environment variable.\nIf this variable is set, the page header will be filled with its contents instead of the application name.\nThe environment variable can contain HTML.</p>\n<p>All environment variables are optional.</p>\n<pre><span class=\"hljs-meta\">#STATUSPAGE_ROUTE=/</span>\n<span class=\"hljs-meta\">#STATUSPAGE_VIEW=status</span>\n<span class=\"hljs-meta\">#STATUSPAGE_HEADER=&quot;&lt;img src=&apos;https://odysseyattribution.co/logo.svg&apos; style=&apos;height: 1.5em; vertical-align: middle;&apos;&gt; status&quot;</span></pre><h2>Usage</h2>\n<h2>Registering checks</h2>\n<p>Statuspage works by registering <code>StatusChecks</code> (either alone or in sections) with <code>Statuspage</code>.\nWe recommend doing this in the <code>boot</code> method of your <code>AppServiceProvider</code>.</p>\n<p><code>Statuspage</code> exposes two relevant methods.</p>\n<ul>\n<li><code>registerCheck($label, $check)</code> allows you to register a single check with a label to the status page.</li>\n<li><code>registerSection($label, [&apos;Label&apos; =&gt; $check, &apos;Label 2&apos; =&gt; $check2])</code> allows you to register a section with a title and multiple checks to the status page.</li>\n</ul>\n<p>For example:</p>\n<pre><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppServiceProvider</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ServiceProvider</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">boot</span><span class=\"hljs-params\">(Statuspage $statuspage)</span> </span>{\n        $statuspage-&gt;registerCheck(<span class=\"hljs-string\">&apos;Code Orange&apos;</span>, <span class=\"hljs-keyword\">new</span> Http200Check(<span class=\"hljs-string\">&apos;https://code-orange.nl&apos;</span>));\n\n        $statuspage-&gt;registerSection(<span class=\"hljs-string\">&apos;Google&apos;</span>, [\n            <span class=\"hljs-string\">&apos;Google 200&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> Http200Check(<span class=\"hljs-string\">&apos;https://www.google.nl&apos;</span>),\n            <span class=\"hljs-string\">&apos;Google without www 200 (should fail)&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> Http200Check(<span class=\"hljs-string\">&apos;https://google.nl&apos;</span>),\n            <span class=\"hljs-string\">&apos;Google without www 301&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> Http200Check(<span class=\"hljs-string\">&apos;https://google.nl&apos;</span>, <span class=\"hljs-number\">301</span>)\n        ]);\n\n        $statuspage-&gt;registerSection(<span class=\"hljs-string\">&apos;Database&apos;</span>, [\n            <span class=\"hljs-string\">&apos;Connection&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> DatabaseConnectionCheck(),\n            <span class=\"hljs-string\">&apos;Non-existing connection&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> DatabaseConnectionCheck(<span class=\"hljs-string\">&apos;asdf&apos;</span>)\n        ]);\n\n        $statuspage-&gt;registerCheck(<span class=\"hljs-string\">&apos;Dummy succesful&apos;</span>, <span class=\"hljs-keyword\">new</span> DummyCheck(Status::$OPERATIONAL));\n\n        $statuspage-&gt;registerSection(<span class=\"hljs-string\">&apos;Color check&apos;</span>, [\n            <span class=\"hljs-string\">&apos;Operational&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> DummyCheck(Status::$OPERATIONAL),\n            <span class=\"hljs-string\">&apos;Maintenance&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> DummyCheck(Status::$MAINTENANCE),\n            <span class=\"hljs-string\">&apos;Degraded&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> DummyCheck(Status::$DEGRADED),\n            <span class=\"hljs-string\">&apos;Partial outage&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> DummyCheck(Status::$PARTIAL_OUTAGE),\n            <span class=\"hljs-string\">&apos;Major outage&apos;</span> =&gt; <span class=\"hljs-keyword\">new</span> DummyCheck(Status::$MAJOR_OUTAGE),\n        ]);\n    }\n}</pre><h2>Writing your own checks</h2>\n<p>While Statuspage comes with a number of basic but useful checks, the real power is in the fact that you can easily define your own custom checks specific to your application.</p>\n<p>To do this, simply start by subclassing <code>CodeOrange\\Statuspage\\Checks\\StatusCheck</code>.\nA check usually takes some arguments in its constructor and executes when its <code>performCheck</code> method is called.\nA check always returns an instance of <code>CodeOrange\\Statuspage\\Status</code>, optionally with a message.</p>\n<h3>Background checking</h3>\n<p>By default, Statuspage executes all checks whenever the page is requested.\nWhile this is fine in a small-scale or development setting, it&apos;s probably not something you want in production.</p>\n<p>To configure Statuspage to instead perform the registered checks in the background, add the following line to your <code>Kernel</code>&apos;s schedule function:</p>\n<pre><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Kernel</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">ConsoleKernel</span> </span>{\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">schedule</span><span class=\"hljs-params\">(Schedule $schedule)</span> </span>{\n        app(Statuspage::class)-&gt;scheduleBackgroundExecution($schedule);\n    }\n}</pre><p>The registered checks will be executed every minute (make sure <code>php artisan schedule:run</code> <a href=\"https://laravel.com/docs/5.5/scheduling#introduction\">is properly configured in your crontab</a>).</p>\n<p>The results of your checks are stored in the default cache store (with key <code>statuspage_status</code>).</p>\n<h2>Known issues</h2>\n<ul>\n<li>The framework doesn&apos;t (yet) deal with long-running checks. You are responsible for managing the run-time of your checks and setting timeouts.</li>\n</ul>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/code-orange/statuspage",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/code-orange",
          "text": "code-orange"
        }
      ]
    }
  ]
}